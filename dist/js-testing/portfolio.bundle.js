/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/portfolio.js":
/*!*****************************!*\
  !*** ./src/js/portfolio.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   changeNamesFocus: () => (/* binding */ changeNamesFocus),\n/* harmony export */   descrChangeFocus: () => (/* binding */ descrChangeFocus)\n/* harmony export */ });\n/* harmony import */ var _sections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sections.js */ \"./src/js/sections.js\");\n\r\n\r\nconst NameText = document.querySelector('.portfolio-container_info_text-content_name');\r\nconst NameTextBtnChange = document.querySelector('.portfolio-container_info_text-content_name_img-change');\r\nconst ChangeBackgroundColorBtn = document.querySelector(\".bck-change-color\");\r\nconst ColorInput = document.getElementById(\"colorInputBackground\");\r\nconst PortfolioDescrText = document.querySelector('.portfolio-container_info_text-content_descr').firstElementChild;\r\nconst PortfolioDescrBtn = PortfolioDescrText.nextElementSibling;\r\nconst ModalRemovingPortfolio = document.getElementById(\"portfolioDeleteAttentionModal\");\r\n\r\nconst match = window.location.href.match(/\\/portfolio\\/(\\d+)/);\r\nconst portfolioId = match ? match[1] : null;\r\n\r\nlet name = NameText.textContent;\r\nlet description = PortfolioDescrText.textContent;\r\n\r\n\r\nfunction rgbToHex(rgb) {\r\n    const nums = rgb.match(/\\b\\d{1,3}\\b/g);\r\n    \r\n    const hex = nums.map(num => {\r\n        const hexNum = Number(num).toString(16);\r\n        return hexNum.length === 1 ? \"0\" + hexNum : hexNum;\r\n    }).join('');\r\n    return '#' + hex;\r\n}\r\n\r\nfunction changeNamesBlur(e,targetText) {\r\n    let input = document.querySelector('.changing-text');\r\n    if (!input) return;\r\n    let inputValue = (input.value === '') ? \"X\" : input.value;\r\n\r\n    const formData = {\r\n        name: e.target.value\r\n    } \r\n\r\n    if (e.target.value !== name) {\r\n\r\n        try {\r\n            const response = fetch(`/portfolio/${portfolioId}/change-name`, {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(formData),\r\n            headers: {\r\n            'Content-type': 'application/json',\r\n            }\r\n        })\r\n        if (response.ok) {\r\n            console.log(\"Успех\");\r\n        }\r\n            \r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    input.replaceWith(targetText);\r\n    targetText.textContent = inputValue;\r\n}\r\n\r\nfunction changeNamesFocus(targetText, maxlength = 30, blurF) {\r\n    let input = document.createElement(\"input\");\r\n    let nameValue = targetText.textContent;\r\n    input.type = \"text\";\r\n    input.className = \"changing-text\";\r\n    input.setAttribute(\"maxlength\", maxlength);\r\n\r\n    targetText.replaceWith(input);\r\n    input.value = nameValue;\r\n\r\n    \r\n\r\n    input.addEventListener(\"blur\", (e) => blurF(e,targetText))\r\n    input.focus();\r\n}\r\n\r\nModalRemovingPortfolio.addEventListener(\"shown.bs.modal\", (e) => {\r\n    document.getElementById(\"acceptRemovingPortfolio\").addEventListener(\"click\", (e) => {\r\n        e.target.previousElementSibling.click()\r\n        const formData = {\r\n            portfolioId: portfolioId\r\n        }\r\n        try {\r\n            const response = fetch(`/portfolio/${portfolioId}/delete-portfolio`, {\r\n            method: \"DELETE\",\r\n            body: JSON.stringify(formData),\r\n            headers: {\r\n            'Content-type': 'application/json',\r\n            }\r\n        })\r\n        if (response.ok) {\r\n            console.log(\"Успех\");\r\n        }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    })\r\n})\r\n\r\nfunction descrChangeBlur(e) {\r\n    let textarea = document.querySelector('.changing-descr');\r\n    let textareaValue = textarea.value;\r\n    textarea.replaceWith(PortfolioDescrText);\r\n    PortfolioDescrText.textContent = textareaValue;\r\n\r\n    const formData = {\r\n        description: textareaValue\r\n    }\r\n\r\n    if ( PortfolioDescrText.textContent !== description) {\r\n        try {\r\n            const response = fetch(`/portfolio/${portfolioId}/change-description`, {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(formData),\r\n            headers: {\r\n            'Content-type': 'application/json',\r\n            }\r\n        })\r\n        if (response.ok) {\r\n            console.log(\"Успех\");\r\n        }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    \r\n    PortfolioDescrBtn.hidden = false;\r\n}\r\n\r\nfunction descrChangeFocus(e,target, blurF) {\r\n    let textarea = document.createElement(\"textarea\");\r\n    target.replaceWith(textarea);\r\n    textarea.value = target.textContent;\r\n    textarea.className = \"changing-descr\";\r\n\r\n    \r\n\r\n    textarea.addEventListener(\"blur\", () => blurF(e,target));\r\n    PortfolioDescrBtn.hidden = true;\r\n    textarea.focus();\r\n}\r\n\r\nfunction changeBackgroundColor() {\r\n    ColorInput.hidden = false;\r\n    document.body.style.overflowY = \"hidden\";\r\n    let currentBackgroundRGB = getComputedStyle(ColorInput.closest(\".container\")).getPropertyValue(\"background-color\");\r\n    ColorInput.value = rgbToHex(currentBackgroundRGB);\r\n\r\n    ColorInput.focus();\r\n    ColorInput.addEventListener('blur', () => {\r\n        ColorInput.closest(\".container\").style.backgroundColor = ColorInput.value;\r\n        ColorInput.hidden = true;\r\n        console.log(\"ColorInput.value\", ColorInput.value)\r\n\r\n        const formData = {\r\n            backgroundColor: ColorInput.value\r\n        }\r\n\r\n        try {\r\n            const response = fetch(`/portfolio/${portfolioId}/change-backgroundColor`, {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(formData),\r\n            headers: {\r\n            'Content-type': 'application/json',\r\n            }\r\n        })\r\n        if (response.ok) {\r\n            console.log(\"Успех\");\r\n        }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n\r\n        document.body.style.overflowY = \"visible\";\r\n    })\r\n}\r\n\r\n// ЗАКИНУТЬ ЭТУ ФУНКЦИЮ И ДОБАВЛЕНИЕ ОБРАБОТЧИКА В ФУНКЦИЮ СОЗДАНИЯ КАРТОЧЕК РАБОТ\r\nfunction showAllTextWorkCard(e) {\r\n    if (!e.target.closest('.section_block_work')) return;\r\n    if (e.target.closest('.section_block_work').querySelector('.section_block_work_add-work')) return;\r\n\r\n\r\n    let currentBlock = e.target.closest('.section_block_work');\r\n    let blockCover = currentBlock.querySelector('.section_block_work_cover');\r\n    let blockText = currentBlock.querySelector('.section_block_work_name');\r\n\r\n    currentBlock.style.overflow = 'visible'\r\n\r\n    blockCover.style.opacity = '0.0';\r\n    \r\n    blockText.style.position = 'absolute';\r\n    blockText.style.top = 10 + \"px\";\r\n    blockText.style.left = 10 + \"px\";\r\n    blockText.style.right = 10 + \"px\";\r\n\r\n    currentBlock.addEventListener('mouseout', ()=> {\r\n    blockText.style.position = 'static';\r\n    blockText.style.top = null;\r\n    blockText.style.left = null;\r\n    blockText.style.right = null;\r\n    currentBlock.style.overflow = 'hidden'\r\n    blockCover.style.opacity = null;\r\n    })\r\n}\r\n\r\ntry {\r\n\r\n    ChangeBackgroundColorBtn.addEventListener(\"click\", changeBackgroundColor)\r\n    PortfolioDescrBtn.addEventListener(\"click\", (event) => descrChangeFocus(event, PortfolioDescrText, descrChangeBlur));\r\n    NameTextBtnChange.addEventListener(\"click\", () => {changeNamesFocus(NameText, 30, changeNamesBlur)});\r\n} catch (err) {\r\n    console.log(err)\r\n}\r\n\r\nlet sectionBlocks = document.querySelectorAll('.section_block');\r\nsectionBlocks.forEach((element) => {\r\nelement.addEventListener('mouseover', showAllTextWorkCard);\r\n})\r\n\r\ntry {\r\n\r\n    document.querySelector(\".modal-body_img-work_download-file\").addEventListener(\"click\", (e)=> {\r\n        e.preventDefault()\r\n    })\r\n} catch (err) {\r\n    \r\n}\r\n\r\nlet changePortfolioBackground = document.getElementById(`backgroundImgFile${portfolioId}`);\r\nchangePortfolioBackground.addEventListener(\"change\", async (e) => {\r\n    let file = e.target.files[0];\r\n    let previousFileName;\r\n    let previousFile;\r\n    const main = document.querySelector(\"main\")\r\n    const mainStyles = getComputedStyle(main);\r\n    const backgroundUrl = mainStyles.backgroundImage; \r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n\r\n    try {\r\n        previousFileName = backgroundUrl.match(/\\/([^\\/]+)\\.[^\\/\\.]+/)[1]\r\n        previousFile = backgroundUrl.match(/\\/([^\\/]+)(\\.[^\\/\\.]+)$/)[1] + backgroundUrl.match(/\\/([^\\/]+)(\\.[^\\/\\.]+)$/)[2].split('\"')[0]\r\n    } catch (err) {\r\n\r\n    }\r\n    const newFilename = (0,_sections_js__WEBPACK_IMPORTED_MODULE_0__.makeFilename)(10) +`.${(0,_sections_js__WEBPACK_IMPORTED_MODULE_0__.getFileExtension)(file.name)}`;\r\n    const resFile = new File([file], newFilename, {type: file.type});\r\n\r\n\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', resFile);\r\n    formData.append('workPath', newFilename);\r\n    formData.append('portfolioId', portfolioId);\r\n    formData.append('previousFileName', previousFileName);\r\n    formData.append('previousFile', previousFile);\r\n\r\n    try {\r\n        const response = await fetch(`/portfolio/${portfolioId}/change-portfolio-background`, {\r\n        method: \"PUT\",\r\n        body: formData,\r\n\r\n    })\r\n    if (response.ok) {\r\n        console.log(\"Успех\");\r\n    }\r\n        \r\n    } catch(err) {\r\n        console.log(err)\r\n    }\r\n    location.reload()\r\n})\r\n\r\n\n\n//# sourceURL=webpack://portfolio/./src/js/portfolio.js?");

/***/ }),

/***/ "./src/js/sections.js":
/*!****************************!*\
  !*** ./src/js/sections.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFileExtension: () => (/* binding */ getFileExtension),\n/* harmony export */   makeFilename: () => (/* binding */ makeFilename)\n/* harmony export */ });\n/* harmony import */ var _portfolio_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portfolio.js */ \"./src/js/portfolio.js\");\nconst addSectionBtn = document.querySelector(\".add-section\");\r\nconst sectionsBlock = document.querySelector(\".sections\");\r\nconst acceptSectionDeleteBtn = document.getElementById(\"deleteSectionModal\");\r\nconst modal = document.getElementById(\"deleteSectionModal\");\r\nconst modalAddWork = document.getElementById(\"addingWorkModal\");\r\nconst activateSectionsLimitModal = document.getElementById(\"sectionsLimitModalActivate\");\r\nconst cancelWorkAdding = document.getElementById(\"cancelWorkAdding\");\r\n\r\n\r\n\r\nconst match = window.location.href.match(/\\/portfolio\\/(\\d+)/);\r\nconst portfolioId = match ? match[1] : null;\r\nfunction addSection() {\r\n    let numOfNewSection = sectionsBlock.querySelectorAll(\".section\").length + 1;\r\n    if (numOfNewSection > 10) {\r\n        activateSectionsLimitModal.click();\r\n        return;\r\n    }\r\n    let newSection = document.createElement(\"div\");\r\n\r\n    newSection.innerHTML = `\r\n    <div class=\"section_title\">\r\n        <h2 class=\"section_title_name\">Секция ${numOfNewSection}</h2>\r\n        <img src=\"../icons/portfolio/text-edit-icon.png\" class=\"section_title_icon\" alt=\"Изменить название\" title=\"Изменить название\">\r\n    </div>\r\n        <img class=\"delete-section\" data-bs-toggle=\"modal\" data-bs-target=\"#deleteSectionModal\" src=\"../icons/portfolio/delete-icon.svg\" title=\"удалить секцию\">\r\n    <div class=\"section_block\">\r\n        <div class=\"section_block_work\">\r\n            <div class=\"section_block_work_add-work\">\r\n                <img data-bs-toggle=\"modal\" data-bs-target=\"#addingWorkModal\" src=\"../icons/portfolio/add-work-icon.png\" alt=\"добавить работу\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n    `\r\n    newSection.className = \"section\";\r\n    sectionsBlock.append(newSection);\r\n\r\n    const newSectionName = newSection.querySelector(\".section_title_name\").textContent\r\n\r\n    const formData = {\r\n        sectionName: newSectionName,\r\n        portfolioId: portfolioId\r\n    }\r\n\r\n\r\n    try {\r\n        const response = fetch(`/portfolio/${portfolioId}/add-section`, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(formData),\r\n        headers: {\r\n        'Content-type': 'application/json',\r\n        }\r\n    })\r\n    if (response.ok) {\r\n        console.log(\"Успех\");\r\n    }\r\n    } catch(err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nlet allSectionsNameEdit = document.querySelectorAll(\".section_title_icon\");\r\nallSectionsNameEdit.forEach((elem) => {\r\n    let sectionName = elem.previousElementSibling;\r\n    function blurSectionName(e,targetText) {\r\n    let input = document.querySelector('.changing-text');\r\n    if (!input) return;\r\n\r\n    let inputValue = (input.value === '') ? \"X\": input.value;\r\n\r\n    const formData = {\r\n        name: inputValue,\r\n        previousName: sectionName.textContent,\r\n        portfolioId: portfolioId\r\n    } \r\n\r\n    if (e.target.value) {\r\n\r\n        try {\r\n            const response = fetch(`/portfolio/${portfolioId}/change-section-name`, {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(formData),\r\n            headers: {\r\n            'Content-type': 'application/json',\r\n            }\r\n        })\r\n        if (response.ok) {\r\n            console.log(\"Успех\");\r\n        }\r\n            \r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    input.replaceWith(targetText);\r\n    targetText.textContent = inputValue;\r\n    }\r\n\r\n    elem.addEventListener(\"click\", (e) => (0,_portfolio_js__WEBPACK_IMPORTED_MODULE_0__.changeNamesFocus)(sectionName, 40, blurSectionName))\r\n})\r\n\r\nfunction makeFilename(length) {\r\n    let result = '';\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    const charactersLength = characters.length;\r\n    let counter = 0;\r\n    while (counter < length) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n      counter += 1;\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction getFileExtension(fileName) {\r\n    const parts = fileName.split('.');\r\n    return parts[parts.length - 1];\r\n}\r\n\r\nconst form = document.forms.workForm;\r\nform.formWorkName.addEventListener(\"input\", (e)=> {\r\n    let select = form.selectExistCard;\r\n\r\n    if (e.target.value !== \"\") {\r\n        select.setAttribute(\"disabled\", true)\r\n    } else if (e.target.value === \"\") {\r\n        select.removeAttribute(\"disabled\")\r\n    }\r\n})\r\nform.formWorkLink.addEventListener(\"input\", (e)=> {\r\n    let select = form.selectExistCard;\r\n\r\n    if (e.target.value !== \"\") {\r\n        select.setAttribute(\"disabled\", true)\r\n    } else if (e.target.value === \"\") {\r\n        select.removeAttribute(\"disabled\")\r\n    }\r\n})\r\nform.formFiles.addEventListener(\"input\", (e)=> {\r\n    let select = form.selectExistCard;\r\n\r\n    if (e.target.value !== \"\") {\r\n        select.setAttribute(\"disabled\", true)\r\n    } else if (e.target.value === \"\") {\r\n        select.removeAttribute(\"disabled\")\r\n    }\r\n})\r\n\r\ntry {\r\nform.selectExistCard.addEventListener(\"input\", (e)=> {\r\n    let workName = form.formWorkName;\r\n    let fileInput = form.formFiles;\r\n    let workLink = form.formWorkLink;\r\n    let workDescription = form.formDescription; \r\n\r\n    if (e.target.value !== \"\") {\r\n        workName.setAttribute(\"disabled\", true)\r\n        fileInput.setAttribute(\"disabled\", true)\r\n        workLink.setAttribute(\"disabled\", true)\r\n        workDescription.setAttribute(\"disabled\", true)\r\n    } else if (e.target.value === \"\") {\r\n        workName.removeAttribute(\"disabled\")\r\n        fileInput.removeAttribute(\"disabled\")\r\n        workLink.removeAttribute(\"disabled\")\r\n        workDescription.removeAttribute(\"disabled\")\r\n    }\r\n})\r\n} catch (err) {\r\n\r\n}\r\n\r\n\r\nasync function changeWorkSection(workId, newSection) {\r\n    const formData = {\r\n        workId,\r\n        newSection,\r\n        portfolioId\r\n    }\r\n\r\n    try {\r\n        const response = fetch(`/portfolio/${portfolioId}/change-work-section`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(formData),\r\n        headers: {\r\n        'Content-type': 'application/json',\r\n        }\r\n    })\r\n    if (response.ok) {\r\n        console.log(\"Успех\");\r\n    }\r\n        \r\n    } catch(err) {\r\n        console.log(err)\r\n    }\r\n    cancelWorkAdding.click()\r\n    location.reload()\r\n}\r\n\r\nasync function addWorkCard(e, targetBlock) {\r\n    const currentSection = e.relatedTarget.closest(\".section\").querySelector(\".section_title_name\").textContent;\r\n    let form = document.forms.workForm;\r\n    let workName = form.formWorkName.value;\r\n    let fileInput = form.formFiles;\r\n    let workLink = form.formWorkLink.value;\r\n    let workDescription = form.formDescription.value; \r\n    let select = form.selectExistCard;\r\n\r\n    let file = fileInput.files[0];\r\n    if (Number.isInteger(+select.value)) {\r\n        changeWorkSection(+select.value, e.relatedTarget.closest(\".section\").dataset.sectionId)\r\n        return;\r\n    }\r\n\r\n    if (!file && !workLink) {\r\n        fileInput.style.borderColor = 'red';\r\n        fileInput.focus();\r\n        fileInput.addEventListener(\"blur\", () => {fileInput.style.borderColor = null})\r\n        return;\r\n    }\r\n    if (!workName) {\r\n        form.formWorkName.style.borderColor = 'red';\r\n        form.formWorkName.focus();\r\n        form.formWorkName.addEventListener(\"blur\", () => {form.formWorkName.style.borderColor = null})\r\n        return;\r\n    }\r\n\r\n\r\n    let card = createWorkCardTemplate();\r\n    card.querySelector(\".section_block_work_name\").textContent = workName;\r\n    let imageCover = card.querySelector(\".section_block_work_cover\").firstElementChild;\r\n\r\n    let reader = new FileReader();\r\n    reader.onload = function(e) {\r\n        imageCover.setAttribute('src', e.target.result)\r\n    }\r\n\r\n    let resFile\r\n    let newFilename = null;\r\n    if (file) {\r\n        reader.readAsDataURL(file);\r\n        newFilename = makeFilename(10) +`.${getFileExtension(file.name)}`;\r\n        resFile = new File([file], newFilename, {type: file.type})\r\n    } \r\n    (newFilename === null) ? null : `/${newFilename}` \r\n    \r\n    const formData = new FormData();\r\n    formData.append('file', resFile);\r\n    formData.append('workName', workName);\r\n    formData.append('workLink', workLink);\r\n    formData.append('workDescription', workDescription);\r\n    formData.append('workPath', newFilename);\r\n    formData.append('sectionName', currentSection);\r\n\r\n    try {\r\n        const response = await fetch(`/portfolio/${portfolioId}/upload`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n    })\r\n    if (response.ok) {\r\n        console.log(\"Успех\");\r\n    }\r\n        \r\n    } catch(err) {\r\n        console.log(err)\r\n    }\r\n    // let formDescr = form.formName;\r\n\r\n    cancelWorkAdding.click()\r\n    targetBlock.before(card);\r\n    form.reset();\r\n    location.reload()\r\n}\r\n\r\nfunction createWorkCardTemplate() {\r\n    let card = document.createElement(\"div\");\r\n    card.className = \"section_block_work\";\r\n    card.innerHTML = `\r\n        <div class=\"section_block_work_cover\"><img src=\"../img/portfolio/work-cover-default.jpg\" alt=\"Обложка карточки\"></div>\r\n        <div class=\"section_block_work_name\">%НАЗВАНИЕ%</div>\r\n    `\r\n    return card;\r\n}\r\n\r\n    modal.addEventListener('shown.bs.modal', (e) => {\r\n        const AcceptDeleteBtn = document.getElementById('acceptDeleteSection');\r\n        let sectionCur = e.relatedTarget.closest(\".section\");\r\n        if (!sectionCur) return;\r\n        AcceptDeleteBtn.addEventListener('click', () => {\r\n            AcceptDeleteBtn.previousElementSibling.click();\r\n            const formData = {\r\n                sectionName: sectionCur.querySelector(\".section_title_name\").textContent,\r\n                portfolioId: portfolioId\r\n            }\r\n            try {\r\n                const response = fetch(`/portfolio/${portfolioId}/delete-section`, {\r\n                method: \"DELETE\",\r\n                body: JSON.stringify(formData),\r\n                headers: {\r\n                'Content-type': 'application/json',\r\n                }\r\n            })\r\n            if (response.ok) {\r\n                console.log(\"Успех\");\r\n            }\r\n            } catch(err) {\r\n                console.log(err)\r\n            }\r\n            sectionCur.remove();\r\n            location.reload();\r\n    });\r\n})\r\n\r\ntry {\r\n\r\n    addSectionBtn.addEventListener(\"click\", () => {\r\n        addSection()\r\n        location.reload()\r\n    });\r\n} catch (err) {\r\n}\r\nlet activeAddWorkModal = false;\r\nmodalAddWork.addEventListener(\"shown.bs.modal\", (e) => {\r\n    if (activeAddWorkModal) return;\r\n    activeAddWorkModal = true;\r\n    let targetBlock = e.relatedTarget.closest(\".section_block_work\");\r\n    document.getElementById(\"acceptWorkAdding\").addEventListener(\"click\", () => addWorkCard(e, targetBlock))\r\n})\r\nlet allWorks = document.querySelectorAll(\".section_block_work\");\r\nlet allDeleteBtns = document.querySelectorAll(\".section_block_work_delete-work\");\r\nlet deleteWorkAttentionBtn = document.getElementById(\"deleteWorkAttentionBtn\");\r\nallDeleteBtns.forEach((btn) => {\r\n    btn.addEventListener(\"click\", (e) => {\r\n        deleteWorkAttentionBtn.click();\r\n        document.getElementById(\"acceptDeletingWork\").addEventListener(\"click\", () => {\r\n            const currentCardId = e.target.closest(\".section_block_work\").dataset.workId;\r\n            const formData = {\r\n                portfolioId: portfolioId,\r\n                workId: currentCardId\r\n            }\r\n    \r\n            try {\r\n                const response = fetch(`/portfolio/${portfolioId}/delete-work`, {\r\n                method: \"DELETE\",\r\n                body: JSON.stringify(formData),\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    }\r\n            })\r\n            if (response.ok) {\r\n                console.log(\"Успех\");\r\n            }\r\n                \r\n            } catch(err) {\r\n                console.log(err)\r\n            }\r\n            location.reload()\r\n        })\r\n        \r\n    })\r\n})\r\nallWorks.forEach((card)=> {\r\n    if (card.querySelector(\".section_block_work_add-work\")) {\r\n        return;\r\n    }\r\n\r\n    card.addEventListener(\"click\", (e) => {\r\n        const currentCard = e.target.closest(\".section_block_work\");\r\n        const currentCardId = currentCard.dataset.workId;\r\n        \r\n        const formData = {\r\n            portfolioId: portfolioId,\r\n            cardId: currentCardId\r\n        }\r\n\r\n        try {\r\n            const response = fetch(`/portfolio/${portfolioId}/watch-work`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(formData),\r\n            headers: {\r\n            'Content-type': 'application/json',\r\n            }\r\n        })\r\n        if (response.ok) {\r\n            console.log(\"Успех\");\r\n        }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n\r\n        card.addEventListener('click', () => {\r\n            let btnOpenWorkModal = document.getElementById(`openWorkModal${currentCardId}`);\r\n            btnOpenWorkModal.click();\r\n        })\r\n\r\n    })\r\n    try {\r\n\r\n    let changeWorkFile = document.getElementById(`inputDownloadNewFileWork${card.dataset.workId}`);\r\n    changeWorkFile.addEventListener(\"change\", async (e)=> {\r\n        let file = e.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        let previousFileName\r\n        let previousFile\r\n        let newFilename\r\n        let resFile\r\n        if (e.target.previousElementSibling.querySelector(\".modal-body_img-work_download-file\") === null) {\r\n            previousFileName = e.target.previousElementSibling.src.match(/\\/([^\\/]+)\\.[^\\/\\.]+/)[1];\r\n            previousFile = \"/\"+e.target.previousElementSibling.src.match(/\\/([^\\/]+)(\\.[^\\/\\.]+)$/)[1] + e.target.previousElementSibling.src.match(/\\/([^\\/]+)(\\.[^\\/\\.]+)$/)[2];\r\n            newFilename = makeFilename(10) +`.${getFileExtension(file.name)}`;\r\n            resFile = new File([file], newFilename, {type: file.type});\r\n        } else {\r\n            previousFileName = e.target.previousElementSibling.action.match(/\\/([^\\/]+)\\.[^\\/\\.]+/)[1];\r\n            previousFile = \"/\"+e.target.previousElementSibling.action.match(/\\/([^\\/]+)(\\.[^\\/\\.]+)$/)[1] + e.target.previousElementSibling.action.match(/\\/([^\\/]+)(\\.[^\\/\\.]+)$/)[2];\r\n            newFilename = makeFilename(10) +`.${getFileExtension(file.name)}`;\r\n            resFile = new File([file], newFilename, {type: file.type});\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', resFile);\r\n        formData.append('workPath', newFilename);\r\n        formData.append('workId', card.dataset.workId);\r\n        formData.append('portfolioId', portfolioId);\r\n        formData.append('previousFileName', previousFileName);\r\n        formData.append('previousFile', previousFile);\r\n\r\n        try {\r\n            const response = await fetch(`/portfolio/${portfolioId}/change-work-file`, {\r\n            method: \"PUT\",\r\n            body: formData,\r\n\r\n        })\r\n        if (response.ok) {\r\n            console.log(\"Успех\");\r\n        }\r\n            \r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    })\r\n} catch(err) {\r\n    \r\n}\r\n\r\n\r\n\r\n})\r\n\r\nlet allChangeWorkNameTextBtn = document.querySelectorAll(\".modal-body_name-work_change-name-btn\");\r\nlet allChangeWorkDescriptionBtn = document.querySelectorAll(\".modal-body_description-work_change-descr-btn\");\r\n\r\nfunction changeNamesBlur(e,targetText) {\r\n    let input = document.querySelector('.changing-text');\r\n    if (!input) return;\r\n    let inputValue = (input.value === '') ? \"Без названия\" : input.value;\r\n\r\n    const formData = {\r\n        workId: e.target.closest(\".modal\").id.match(/\\d+/g)[0],\r\n        workName: inputValue,\r\n        portfolioId: portfolioId\r\n    } \r\n\r\n    try {\r\n        const response = fetch(`/portfolio/${portfolioId}/change-work-name`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(formData),\r\n        headers: {\r\n        'Content-type': 'application/json',\r\n        }\r\n    })\r\n    if (response.ok) {\r\n        console.log(\"Успех\");\r\n    }\r\n        \r\n    } catch(err) {\r\n        console.log(err)\r\n    }\r\n\r\n\r\n    input.replaceWith(targetText);\r\n    targetText.textContent = inputValue;\r\n}\r\n\r\nfunction changeDescrBlur(e, target) {\r\n    let textarea = document.querySelector('.changing-descr');\r\n    let textareaValue = textarea.value;\r\n    textarea.replaceWith(target);\r\n    target.textContent = textareaValue;\r\n\r\n    const formData = {\r\n        workDescription: textareaValue,\r\n        workId: e.target.closest(\".modal\").id.match(/\\d+/g)[0],\r\n        portfolioId: portfolioId\r\n    }\r\n\r\n    try {\r\n        const response = fetch(`/portfolio/${portfolioId}/change-work-description`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(formData),\r\n        headers: {\r\n        'Content-type': 'application/json',\r\n        }\r\n    })\r\n    if (response.ok) {\r\n        console.log(\"Успех\");\r\n    }\r\n    } catch(err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nallChangeWorkNameTextBtn.forEach((btn) => {\r\n    let nameField = btn.previousElementSibling;\r\n    btn.addEventListener(\"click\", () => (0,_portfolio_js__WEBPACK_IMPORTED_MODULE_0__.changeNamesFocus)(nameField, 80, changeNamesBlur))\r\n})\r\nallChangeWorkDescriptionBtn.forEach((btn) => {\r\n    let descrField = btn.previousElementSibling;\r\n    btn.addEventListener(\"click\", (e) => (0,_portfolio_js__WEBPACK_IMPORTED_MODULE_0__.descrChangeFocus)(e,descrField, changeDescrBlur))\r\n})\r\ncancelWorkAdding.addEventListener(\"click\", ()=> {\r\n    let workName = form.formWorkName;\r\n    let fileInput = form.formFiles;\r\n    let workLink = form.formWorkLink;\r\n    let workDescription = form.formDescription; \r\n\r\n    workName.removeAttribute(\"disabled\")\r\n    fileInput.removeAttribute(\"disabled\")\r\n    workLink.removeAttribute(\"disabled\")\r\n    workDescription.removeAttribute(\"disabled\")\r\n\r\n    form.selectExistCard.removeAttribute(\"disabled\");\r\n    form.reset();\r\n})\r\n\r\n\n\n//# sourceURL=webpack://portfolio/./src/js/sections.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/sections.js");
/******/ 	
/******/ })()
;